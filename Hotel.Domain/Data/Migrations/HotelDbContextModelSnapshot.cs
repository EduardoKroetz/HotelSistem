// <auto-generated />
using System;
using Hotel.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel.Domain.Data.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    partial class HotelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdminPermissions", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("AdminId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AdminPermissions");
                });

            modelBuilder.Entity("EmployeePermission", b =>
                {
                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("EmployeesId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("EmployeePermissions", (string)null);
                });

            modelBuilder.Entity("EmployeeResponsibilities", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ResponsibilityId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("EmployeeId", "ResponsibilityId");

                    b.HasIndex("ResponsibilityId");

                    b.ToTable("EmployeeResponsibilities");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.AdminEntity.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date")
                        .HasColumnName("DateOfBirth");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<bool>("IncompleteProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRootAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.CategoryEntity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.CustomerEntity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date")
                        .HasColumnName("DateOfBirth");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<bool>("IncompleteProfile")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(120)");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.DislikeEntity.Dislike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Dislikes");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.EmployeeEntity.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date")
                        .HasColumnName("DateOfBirth");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<bool>("IncompleteProfile")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("PasswordHash");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.FeedbackEntity.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<short>("Rate")
                        .HasColumnType("SMALLINT");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ImageEntity.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.InvoiceEntity.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("DECIMAL(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.LikeEntity.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.PermissionEntity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ReportEntity.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ReservationEntity.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTime>("ExpectedCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedCheckOut")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExpectedTimeHosted")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TimeHosted")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ResponsibilityEntity.Responsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Responsibilities", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.RoomEntity.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripeProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ServiceEntity.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("StripeProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("Hotel.Domain.Entities.VerificationCodeEntity.VerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("VerificationCodes", (string)null);
                });

            modelBuilder.Entity("InvoiceService", b =>
                {
                    b.Property<Guid>("InvoicesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("InvoicesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServicesInvoices", (string)null);
                });

            modelBuilder.Entity("ReservationService", b =>
                {
                    b.Property<Guid>("ReservationsId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("ReservationsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ReservationServices", (string)null);
                });

            modelBuilder.Entity("ResponsibilityService", b =>
                {
                    b.Property<Guid>("ResponsibilitiesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("ResponsibilitiesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServiceResponsibilities", (string)null);
                });

            modelBuilder.Entity("RoomServices", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("RoomId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RoomServices");
                });

            modelBuilder.Entity("AdminPermissions", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.AdminEntity.Admin", null)
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AdminPermissions_Admin");

                    b.HasOne("Hotel.Domain.Entities.PermissionEntity.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AdminPermission_Permission");
                });

            modelBuilder.Entity("EmployeePermission", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.EmployeeEntity.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.PermissionEntity.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeResponsibilities", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.EmployeeEntity.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeResponsibilities_Employee");

                    b.HasOne("Hotel.Domain.Entities.ResponsibilityEntity.Responsibility", null)
                        .WithMany()
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeResponsibilities_Responsibility");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.AdminEntity.Admin", b =>
                {
                    b.OwnsOne("Hotel.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("City")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Country");

                            b1.Property<int?>("Number")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INT")
                                .HasDefaultValue(0)
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Street");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(120)")
                                .HasColumnName("Email");

                            b1.HasKey("AdminId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("LastName");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("AdminId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Phone");

                            b1.HasKey("AdminId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Domain.Entities.CustomerEntity.Customer", b =>
                {
                    b.OwnsOne("Hotel.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("City")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Country");

                            b1.Property<int?>("Number")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INT")
                                .HasDefaultValue(0)
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Street");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(120)")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("LastName");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Phone");

                            b1.HasKey("CustomerId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Domain.Entities.DislikeEntity.Dislike", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Dislikes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.FeedbackEntity.Feedback", "Feedback")
                        .WithMany("Dislikes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.EmployeeEntity.Employee", b =>
                {
                    b.OwnsOne("Hotel.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("City")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Country");

                            b1.Property<int?>("Number")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INT")
                                .HasDefaultValue(0)
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("Street");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(120)")
                                .HasColumnName("Email");

                            b1.HasKey("EmployeeId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("VARCHAR(40)")
                                .HasColumnName("LastName");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Phone");

                            b1.HasKey("EmployeeId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Domain.Entities.FeedbackEntity.Feedback", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.ReservationEntity.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.RoomEntity.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ImageEntity.Image", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.RoomEntity.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RoomImages");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.InvoiceEntity.Invoice", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.LikeEntity.Like", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Likes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.FeedbackEntity.Feedback", "Feedback")
                        .WithMany("Likes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ReportEntity.Report", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.EmployeeEntity.Employee", "Employee")
                        .WithMany("Reports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.ReservationEntity.Reservation", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CustomerEntity.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.InvoiceEntity.Invoice", "Invoice")
                        .WithOne("Reservation")
                        .HasForeignKey("Hotel.Domain.Entities.ReservationEntity.Reservation", "InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hotel.Domain.Entities.RoomEntity.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_Room");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.RoomEntity.Room", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.CategoryEntity.Category", "Category")
                        .WithMany("Rooms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.VerificationCodeEntity.VerificationCode", b =>
                {
                    b.OwnsOne("Hotel.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("VerificationCodeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(120)")
                                .HasColumnName("Email");

                            b1.HasKey("VerificationCodeId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasFilter("[Email] IS NOT NULL");

                            b1.ToTable("VerificationCodes");

                            b1.WithOwner()
                                .HasForeignKey("VerificationCodeId");
                        });

                    b.OwnsOne("Hotel.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("VerificationCodeId")
                                .HasColumnType("UNIQUEIDENTIFIER");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Phone");

                            b1.HasKey("VerificationCodeId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasFilter("[Phone] IS NOT NULL");

                            b1.ToTable("VerificationCodes");

                            b1.WithOwner()
                                .HasForeignKey("VerificationCodeId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("InvoiceService", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.InvoiceEntity.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.ServiceEntity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReservationService", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.ReservationEntity.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.ServiceEntity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResponsibilityService", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.ResponsibilityEntity.Responsibility", null)
                        .WithMany()
                        .HasForeignKey("ResponsibilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.ServiceEntity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomServices", b =>
                {
                    b.HasOne("Hotel.Domain.Entities.RoomEntity.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Domain.Entities.ServiceEntity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Domain.Entities.CategoryEntity.Category", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.CustomerEntity.Customer", b =>
                {
                    b.Navigation("Dislikes");

                    b.Navigation("Feedbacks");

                    b.Navigation("Invoices");

                    b.Navigation("Likes");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.EmployeeEntity.Employee", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.FeedbackEntity.Feedback", b =>
                {
                    b.Navigation("Dislikes");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.InvoiceEntity.Invoice", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Hotel.Domain.Entities.RoomEntity.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
